// –ü—Ä–µ–¥–ª–∞–≥–∞—é —Ç–∞–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ —Å–æ –∑–≤–µ–∑–¥–æ—á–∫–æ–π. –•–æ—Ç—è –Ω–∞—Ö—É–π —ç—Ç—É –∑–≤–µ–∑–¥—É—á–∫—É - –ø—É—Å—Ç—å –¥—É–º–∞—é—Ç ))
// –í –∑–∞–¥–∞–Ω–∏—è—Ö –æ–Ω–∏ –¥–µ–ª–∞—é—Ç —Å–ª–æ–≤–∞—Ä–∏ —Å –≥–æ—Ä–æ–¥–∞–º–∏ –∏ –¥–∏—Å—Ç–∞–Ω—Ü–∏—è–º–∏. –ù–∞–¥–æ –ø—Ä–∏–¥—É–º–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –¥–≤–∞ –≥–æ—Ä–æ–¥–∞ –∏ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ. –£ –º–µ–Ω—è –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤. –í –∫–æ—Ä—Ç–µ–∂–µ 0 - –ø–æ—Ä—è–¥–∫–æ–≤—ã–π –Ω–æ–º–µ—Ä –≥–æ—Ä–æ–¥–∞, 1 - –Ω–∞ –∫–∞–∫–æ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–∏ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –æ—Ç –ø–µ—Ä–≤–æ–≥–æ –≥–æ—Ä–æ–¥–∞. –ñ–¥—É –≤–∞—à–∏—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏ –∏ –∑–∞–º–µ—á–∞–Ω–∏–π –ø–æ –î–ó. –∏ –∫–æ–¥—É.
// –ó–´: –ø–∏—Å–∞–ª –Ω–æ—á—å—é –≤ –ø–æ–ª—É–æ–±–º–æ—Ä–æ—á–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏. –°–µ–π—á–∞—Å —Å—Ç—Ä–∞—à–Ω–æ –Ω–∞ –Ω–µ–≥–æ —Å–º–æ—Ç—Ä–µ—Ç—å üòÖ

enum Cities {
    case bangkok
    case ratchaburi
    case phetchaburi
    case prajuabkirikhan
    case chumphon
}

let distanceBetweenCities: [Cities: (Int, Int)] = [.bangkok: (1, 0), .ratchaburi: (2, 98), .phetchaburi: (3, 220), .prajuabkirikhan: (4, 400), .chumphon: (5, 660)]

func calculateDistance(first: Cities, last: Cities) {
    if let firstCity = distanceBetweenCities[first], let lastCity = distanceBetweenCities[last] {
        var distance: Int = 0
        var arrayDistance: [Int] = []
        if firstCity.0 < lastCity.0 {
            let range = firstCity.0...lastCity.0
            for (_, value) in distanceBetweenCities {
                if range.contains(value.0) {
                    arrayDistance.append(value.1)
                }
            }
            arrayDistance.sort()
            for i in 1...arrayDistance.count - 1 {
                distance += arrayDistance[i] - arrayDistance[i-1]
                    print(i - 1)
            }
            print(distance)
        } else {
            let range = lastCity.0...firstCity.0
            for (_, value) in distanceBetweenCities {
                if range.contains(value.0) {
                    arrayDistance.append(value.1)
                }
            }
            arrayDistance.sort()
            arrayDistance.reverse()
            print(arrayDistance)
            for i in 1...arrayDistance.count - 1 {
                distance += arrayDistance[i - 1] - arrayDistance[i]
            }
            print(distance)
        }
    }
}

calculateDistance(first: .phetchaburi, last: .ratchaburi)

